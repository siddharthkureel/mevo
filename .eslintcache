[{"C:\\Users\\sidd\\Desktop\\mevo\\src\\index.js":"1","C:\\Users\\sidd\\Desktop\\mevo\\src\\App.js":"2","C:\\Users\\sidd\\Desktop\\mevo\\src\\components\\Navbar.js":"3","C:\\Users\\sidd\\Desktop\\mevo\\src\\pages\\Home.js":"4","C:\\Users\\sidd\\Desktop\\mevo\\src\\components\\Map.js":"5","C:\\Users\\sidd\\Desktop\\mevo\\src\\api\\index.js":"6"},{"size":361,"mtime":1612272661356,"results":"7","hashOfConfig":"8"},{"size":256,"mtime":1612425441259,"results":"9","hashOfConfig":"8"},{"size":759,"mtime":1612706526080,"results":"10","hashOfConfig":"8"},{"size":3238,"mtime":1613061835042,"results":"11","hashOfConfig":"8"},{"size":4753,"mtime":1613061691913,"results":"12","hashOfConfig":"8"},{"size":101,"mtime":1612426550492,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"yjig2b",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sidd\\Desktop\\mevo\\src\\index.js",[],["28","29"],"C:\\Users\\sidd\\Desktop\\mevo\\src\\App.js",[],"C:\\Users\\sidd\\Desktop\\mevo\\src\\components\\Navbar.js",[],"C:\\Users\\sidd\\Desktop\\mevo\\src\\pages\\Home.js",["30"],"import React, { useLayoutEffect, useState } from 'react';\r\nimport { point } from '@turf/helpers';\r\nimport distance from '@turf/distance';\r\n\r\nimport http from '../api';\r\nimport Map from '../components/Map';\r\n\r\nconst Home = () => {\r\n\r\n    const [vehicles, setVehicles] = useState([]);\r\n    const [homeZones, setHomeZones] = useState([]);\r\n\r\n    const [toggle, setToggle] = useState(false);\r\n\r\n    useLayoutEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await http.get('/public/vehicles/all');\r\n            const result2 = await http.get('/public/home-zones/all');\r\n            setVehicles(vehicles.concat(result.data));\r\n            setHomeZones(homeZones.concat(result2.data));\r\n        }\r\n        fetchData()\r\n    }, []);\r\n\r\n    const handleClosestCar = async () => {\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        };\r\n        const success = async (pos) => {\r\n            const { latitude, longitude } = pos.coords;\r\n            const newData = vehicles.map((vehicle)=>{\r\n                const from = point([latitude, longitude]);\r\n                const to = point([vehicle.position.latitude, vehicle.position.longitude]);\r\n                const d = distance(from, to);\r\n                return {\r\n                    ...vehicle,\r\n                    distance: d\r\n                }\r\n            })\r\n            const ascendingOrder = newData.sort((a, b) => parseFloat(a.distance) - parseFloat(b.distance));;\r\n            setVehicles(ascendingOrder);\r\n            setToggle(true);\r\n        }\r\n        const error = (err) => {\r\n            console.warn(`ERROR(${err.code}): ${err.message}`);\r\n        }\r\n        navigator.geolocation.getCurrentPosition(success, error, options);\r\n          \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div style={styles.container} >\r\n                    <button style={styles.button} onClick={handleClosestCar} >Closet Car</button>\r\n                    {\r\n                        toggle ? \r\n                        <>\r\n                            <span style={styles.first} >1st closest car</span>\r\n                            <span style={styles.second} >2nd closest car</span>\r\n                            <span style={styles.third} >3rd closest car</span>\r\n                        </>\r\n                        :null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <Map vehicles={vehicles} homeZones={homeZones} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    container: {\r\n        position: \"absolute\", \r\n        display: \"grid\", \r\n        zIndex: \"999\"\r\n    },\r\n    button: {\r\n        backgroundColor: \"#4CAF50\", \r\n        border: \"none\", \r\n        color: \"white\", \r\n        padding: \"15px 32px\", \r\n        textAlign: \"center\", \r\n        textDecoration: \"none\", \r\n        display: \"inline-block\", \r\n        fontSize: \"16px\",\r\n    },\r\n    first: {\r\n        border: '2px solid green',\r\n        margin: '0 10px'\r\n    },\r\n    second: {\r\n        border: '2px solid yellow',\r\n        margin: '0 10px'\r\n    },\r\n    third: {\r\n        border: '2px solid orange',\r\n        margin: '0 10px'\r\n    }\r\n}\r\n\r\nexport default Home;","C:\\Users\\sidd\\Desktop\\mevo\\src\\components\\Map.js",[],"C:\\Users\\sidd\\Desktop\\mevo\\src\\api\\index.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":23,"column":8,"nodeType":"37","endLine":23,"endColumn":10,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useLayoutEffect has missing dependencies: 'homeZones' and 'vehicles'. Either include them or remove the dependency array. You can also do a functional update 'setVehicles(v => ...)' if you only need 'vehicles' in the 'setVehicles' call.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [homeZones, vehicles]",{"range":"44","text":"45"},[754,756],"[homeZones, vehicles]"]